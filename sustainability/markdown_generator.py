from typing import Dict, Any, List, Optional
from datetime import datetime
import json
import re

class MarkdownFormatter:
    """Advanced markdown formatter for comprehensive sustainability training content"""
    
    def __init__(self, session_id: str):
        self.session_id = session_id
        self.generation_timestamp = datetime.now()
        self.content_sections = []
        self.toc_items = []
        
    def generate_comprehensive_markdown(self, 
                                      extracted_data: Dict[str, Any], 
                                      validation_result: Dict[str, Any],
                                      integration_result: Dict[str, Any],
                                      training_request: Dict[str, Any]) -> str:
        """Generate comprehensive markdown from all extracted task data"""
        
        # Extract individual task data
        scenario_data = extracted_data.get("scenario_data", {})
        problematic_data = extracted_data.get("problematic_messages", {})
        corrected_data = extracted_data.get("corrected_messages", {})
        playbook_data = extracted_data.get("playbook_data", {})
        
        # Build comprehensive content
        content_parts = []
        
        # Header and metadata
        content_parts.append(self._generate_header(scenario_data, training_request, validation_result))
        
        # Table of contents
        content_parts.append(self._generate_table_of_contents())
        
        # Executive summary
        content_parts.append(self._generate_executive_summary(scenario_data, playbook_data, validation_result))
        
        # Business scenario (detailed)
        content_parts.append(self._generate_business_scenario_section(scenario_data))
        
        # Problematic messaging analysis (comprehensive)
        content_parts.append(self._generate_problematic_analysis_section(problematic_data, scenario_data))
        
        # Best practice corrections (detailed)
        content_parts.append(self._generate_corrections_section(corrected_data, problematic_data, scenario_data))
        
        # Integrated message examples
        content_parts.append(self._generate_integrated_examples_section(integration_result))
        
        # Frameworks and tools (enhanced)
        content_parts.append(self._generate_frameworks_section(playbook_data, corrected_data))
        
        # Compliance and validation
        content_parts.append(self._generate_compliance_section(playbook_data, training_request))
        
        # Case studies (rich examples)
        content_parts.append(self._generate_case_studies_section(playbook_data, problematic_data))
        
        # Implementation guide
        content_parts.append(self._generate_implementation_section(playbook_data, scenario_data))
        
        # Regulatory reference
        content_parts.append(self._generate_regulatory_section(playbook_data, training_request))
        
        # Quality metrics and session info
        content_parts.append(self._generate_quality_metrics_section(validation_result, extracted_data))
        
        # Appendices
        content_parts.append(self._generate_appendices_section(playbook_data, extracted_data))
        
        # Join all parts
        return "\n\n".join(content_parts)
    
    def _generate_header(self, scenario_data: Dict[str, Any], training_request: Dict[str, Any], validation: Dict[str, Any]) -> str:
        """Generate comprehensive document header"""
        company_name = scenario_data.get("company_name", "Your Organization")
        industry = training_request.get("industry_focus", "Business")
        framework = training_request.get("regulatory_framework", "Global")
        
        quality_emoji = "🟢" if validation.get("quality_score", 0) >= 80 else "🟡" if validation.get("quality_score", 0) >= 60 else "🔴"
        
        return f"""# Comprehensive Sustainability Messaging Playbook
## {company_name} - {industry} Industry Guide

**🎯 Regulatory Framework:** {framework}  
**📊 Training Level:** {training_request.get("training_level", "Intermediate")}  
**🤖 Generated by:** Sustainability Training AI  
**📅 Created:** {self.generation_timestamp.strftime('%Y-%m-%d %H:%M:%S')}  
**🆔 Session ID:** {self.session_id}  
**⭐ Quality Score:** {validation.get("quality_score", 0):.1f}/100 {quality_emoji}  
**📈 Data Completeness:** {validation.get("completeness_percentage", 0):.1f}%

---

> **🌱 AI-Powered Sustainability Communications Training**  
> This comprehensive playbook provides industry-specific guidance for creating compliant, effective sustainability messaging based on current regulatory requirements and best practices.

---"""

    def _generate_table_of_contents(self) -> str:
        """Generate dynamic table of contents"""
        return """## 📋 Table of Contents

1. [📊 Executive Summary](#executive-summary)
2. [🏢 Business Scenario Analysis](#business-scenario-analysis)
3. [🚨 Problematic Messaging Analysis](#problematic-messaging-analysis)
4. [✅ Best Practice Corrections](#best-practice-corrections)
5. [🔗 Integrated Message Examples](#integrated-message-examples)
6. [🛠️ Frameworks and Validation Tools](#frameworks-and-validation-tools)
7. [✅ Compliance Guidelines](#compliance-guidelines)
8. [📖 Case Study Library](#case-study-library)
9. [🚀 Implementation Roadmap](#implementation-roadmap)
10. [📄 Regulatory Reference Guide](#regulatory-reference-guide)
11. [📊 Quality Metrics & Session Data](#quality-metrics-session-data)
12. [📚 Appendices](#appendices)

---"""

    def _generate_executive_summary(self, scenario_data: Dict[str, Any], playbook_data: Dict[str, Any], validation: Dict[str, Any]) -> str:
        """Generate comprehensive executive summary"""
        company_name = scenario_data.get("company_name", "Your Organization")
        industry = scenario_data.get("industry", "your industry")
        
        summary_text = playbook_data.get("executive_summary", "")
        if not summary_text:
            summary_text = f"This comprehensive playbook provides {company_name} with detailed guidance for creating compliant sustainability messaging in the {industry} sector."
        
        return f"""## 📊 Executive Summary

{summary_text}

### 🎯 Key Training Outcomes

**For {company_name}:**
- ✅ **Industry-Specific Guidance** - Tailored recommendations for {industry} sector
- ✅ **Regulatory Compliance** - Current requirements and enforcement trends
- ✅ **Risk Mitigation** - Identification and correction of problematic messaging patterns
- ✅ **Best Practice Implementation** - Proven frameworks and validation tools
- ✅ **Team Training Resources** - Ready-to-use materials for staff education

### 📈 Playbook Quality Metrics

- **🎯 Content Accuracy:** {validation.get('quality_score', 0):.1f}/100
- **📊 Data Completeness:** {validation.get('completeness_percentage', 0):.1f}%
- **🔍 Validation Checks:** {len(validation.get('task_validations', {}))} comprehensive reviews
- **⚠️ Issues Identified:** {len(validation.get('overall_issues', []))} areas for attention
- **💪 Strengths Found:** {sum(len(v.get('strengths', [])) for v in validation.get('task_validations', {}).values())} best practices

### 🚀 Immediate Action Items

1. **Review Business Scenario** - Understand your specific context and challenges
2. **Analyze Problematic Patterns** - Identify risks in current messaging
3. **Implement Corrections** - Apply validated improvements to communications
4. **Deploy Frameworks** - Use validation tools for ongoing compliance
5. **Train Your Team** - Share resources and conduct workshops

---"""

    def _generate_business_scenario_section(self, scenario_data: Dict[str, Any]) -> str:
        """Generate detailed business scenario section"""
        if not scenario_data:
            return "## 🏢 Business Scenario Analysis\n\n*No business scenario data available*\n\n---"
        
        company_name = scenario_data.get("company_name", "Company Name")
        
        content = f"""## 🏢 Business Scenario Analysis
### {company_name} - Sustainability Messaging Context

#### 🏪 Company Profile

**Company Name:** {scenario_data.get("company_name", "N/A")}  
**Industry Sector:** {scenario_data.get("industry", "N/A")}  
**Organization Size:** {scenario_data.get("company_size", "N/A")}  
**Primary Location:** {scenario_data.get("location", "N/A")}  

#### 🎯 Products & Services

{scenario_data.get("product_service", "Product and service information not available")}

#### 👥 Target Market Analysis

**Primary Audience:** {scenario_data.get("target_audience", "Target audience not specified")}

#### 📈 Marketing Objectives"""
        
        marketing_objectives = scenario_data.get("marketing_objectives", [])
        if marketing_objectives:
            content += "\n\n" + self._format_list_items(marketing_objectives)
        else:
            content += "\n\n*No specific marketing objectives defined*"
        
        content += f"""

#### 🌱 Sustainability Context & Challenges

{scenario_data.get("sustainability_context", "Sustainability context not provided")}

#### 📋 Preliminary Sustainability Claims Under Review"""
        
        preliminary_claims = scenario_data.get("preliminary_claims", [])
        if preliminary_claims:
            content += "\n\n" + self._format_list_items(preliminary_claims, "⚠️")
        else:
            content += "\n\n*No preliminary claims specified*"
        
        content += f"""

#### ⚖️ Regulatory Compliance Context

{scenario_data.get("regulatory_context", "Regulatory context not specified")}"""
        
        # Add additional context if available
        if scenario_data.get("competitive_landscape"):
            content += f"""

#### 🏆 Competitive Landscape

{scenario_data["competitive_landscape"]}"""
        
        if scenario_data.get("current_practices"):
            content += f"""

#### 🔄 Current Sustainability Practices

{self._format_list_items(scenario_data["current_practices"], "✅")}"""
        
        if scenario_data.get("challenges_faced"):
            content += f"""

#### ⚠️ Key Challenges Identified

{self._format_list_items(scenario_data["challenges_faced"], "🔸")}"""
        
        # Research sources
        research_sources = scenario_data.get("market_research_sources", [])
        if research_sources:
            content += f"""

#### 📚 Market Research Sources

{self._format_list_items(research_sources, "🔗")}"""
        
        content += "\n\n---"
        return content

    def _generate_problematic_analysis_section(self, problematic_data: Dict[str, Any], scenario_data: Dict[str, Any]) -> str:
        """Generate comprehensive problematic messaging analysis"""
        if not problematic_data:
            return "## 🚨 Problematic Messaging Analysis\n\n*No problematic messaging data available*\n\n---"
        
        company_name = scenario_data.get("company_name", "the company")
        
        content = f"""## 🚨 Problematic Messaging Analysis
### Identifying Greenwashing Risks for {company_name}

#### 🎯 Analysis Overview

**Scenario Reference:** {problematic_data.get("scenario_reference", "Not specified")}

#### 🌍 Current Regulatory Landscape

{problematic_data.get("regulatory_landscape", "Regulatory landscape information not available")}"""
        
        # Industry-specific insights
        if problematic_data.get("industry_specific_insights"):
            content += f"""

#### 🏭 Industry-Specific Compliance Insights

{problematic_data["industry_specific_insights"]}"""
        
        # Enforcement trends
        enforcement_trends = problematic_data.get("enforcement_trends", [])
        if enforcement_trends:
            content += f"""

#### 📈 Current Enforcement Trends

{self._format_list_items(enforcement_trends, "⚡")}"""
        
        content += """

### ⚠️ Problematic Message Examples & Analysis"""
        
        problematic_messages = problematic_data.get("problematic_messages", [])
        
        for i, message in enumerate(problematic_messages, 1):
            content += f"""

#### ❌ Problematic Message #{i}

**Problematic Statement:**
> "{message.get('message', 'Message not available')}"

**🔍 Problems Identified:**
{self._format_list_items(message.get('problems_identified', []), "🔸")}

**⚖️ Regulatory Violations:**
{self._format_list_items(message.get('regulatory_violations', []), "⚖️")}

**🚫 Greenwashing Patterns Demonstrated:**
{self._format_list_items(message.get('greenwashing_patterns', []), "🚫")}

**📋 Detailed Analysis:**
{message.get('why_problematic', 'Analysis not available')}

**🏢 Real-World Examples:**
{self._format_list_items(message.get('real_world_examples', []), "📰")}

**⚠️ Potential Consequences:**
{self._format_list_items(message.get('potential_consequences', []), "⚠️")}"""
            
            # Context-specific issues
            if message.get('context_specific_issues'):
                content += f"""

**🎯 Context-Specific Issues for {company_name}:**
{message['context_specific_issues']}"""
            
            # Alternative approaches
            alternative_approaches = message.get('alternative_approaches', [])
            if alternative_approaches:
                content += f"""

**💡 Initial Improvement Suggestions:**
{self._format_list_items(alternative_approaches, "💡")}"""
        
        # General patterns
        general_patterns = problematic_data.get("general_patterns_found", [])
        if general_patterns:
            content += f"""

### 🔍 Common Greenwashing Patterns Identified

{self._format_list_items(general_patterns, "🔸")}"""
        
        # Research sources
        research_sources = problematic_data.get("research_sources", [])
        if research_sources:
            content += f"""

### 📚 Analysis Sources & References

{self._format_list_items(research_sources, "🔗")}"""
        
        content += "\n\n---"
        return content

    def _generate_corrections_section(self, corrected_data: Dict[str, Any], problematic_data: Dict[str, Any], scenario_data: Dict[str, Any]) -> str:
        """Generate comprehensive corrections section"""
        if not corrected_data:
            return "## ✅ Best Practice Corrections\n\n*No correction data available*\n\n---"
        
        company_name = scenario_data.get("company_name", "your organization")
        
        content = f"""## ✅ Best Practice Corrections
### Transforming Problematic Messages into Compliant Communications

#### 🎯 Correction Methodology for {company_name}

**Scenario Context:** {corrected_data.get("scenario_reference", "Not specified")}

This section provides specific, validated improvements to the problematic messages identified above, ensuring compliance with current regulations while maintaining marketing effectiveness."""
        
        corrected_messages = corrected_data.get("corrected_messages", [])
        
        for i, correction in enumerate(corrected_messages, 1):
            original_id = correction.get("original_message_id", str(i))
            
            content += f"""

### ✅ Correction #{i} (Message {original_id})

**🔄 Improved Message:**
> "{correction.get('corrected_message', 'Corrected message not available')}"

**🛠️ Specific Changes Made:**
{self._format_list_items(correction.get('changes_made', []), "🔧")}

**⚖️ Compliance Notes:**
{correction.get('compliance_notes', 'Compliance information not available')}

**💎 Best Practices Applied:**
{self._format_list_items(correction.get('best_practices_applied', []), "⭐")}

**🏢 Companies Using Similar Effective Messaging:**
{self._format_list_items(correction.get('real_world_examples', []), "📈")}

**🎯 Why This Correction Works:**
{correction.get('effectiveness_rationale', 'Effectiveness explanation not available')}"""
            
            # Evidence required
            evidence_required = correction.get('evidence_required', [])
            if evidence_required:
                content += f"""

**📊 Evidence Required to Support This Claim:**
{self._format_list_items(evidence_required, "📋")}"""
            
            # Monitoring suggestions
            monitoring_suggestions = correction.get('monitoring_suggestions', [])
            if monitoring_suggestions:
                content += f"""

**📊 Monitoring & Measurement Recommendations:**
{self._format_list_items(monitoring_suggestions, "📊")}"""
        
        # General guidelines
        general_guidelines = corrected_data.get("general_guidelines", [])
        if general_guidelines:
            content += f"""

### 📋 General Messaging Guidelines

{self._format_list_items(general_guidelines, "✅")}"""
        
        # Key principles
        key_principles = corrected_data.get("key_principles", [])
        if key_principles:
            content += f"""

### 🎯 Key Principles for Effective Sustainability Communication

{self._format_list_items(key_principles, "🌟")}"""
        
        # Regulatory compliance tips
        compliance_tips = corrected_data.get("regulatory_compliance_tips", [])
        if compliance_tips:
            content += f"""

### ⚖️ Regulatory Compliance Tips

{self._format_list_items(compliance_tips, "⚖️")}"""
        
        # Industry-specific advice
        industry_advice = corrected_data.get("industry_specific_advice", "")
        if industry_advice:
            content += f"""

### 🏭 Industry-Specific Advice

{industry_advice}"""
        
        # Implementation roadmap
        implementation_roadmap = corrected_data.get("implementation_roadmap", [])
        if implementation_roadmap:
            content += f"""

### 🗺️ Implementation Roadmap

{self._format_list_items(implementation_roadmap, "📍")}"""
        
        # Success metrics
        success_metrics = corrected_data.get("success_metrics", [])
        if success_metrics:
            content += f"""

### 📊 Success Metrics & KPIs

{self._format_list_items(success_metrics, "📈")}"""
        
        # Research sources
        research_sources = corrected_data.get("research_sources", [])
        if research_sources:
            content += f"""

### 📚 Best Practice Sources & References

{self._format_list_items(research_sources, "🔗")}"""
        
        content += "\n\n---"
        return content

    def _generate_integrated_examples_section(self, integration_result: Dict[str, Any]) -> str:
        """Generate integrated message examples section"""
        if not integration_result or not integration_result.get("integrated_messages"):
            return "## 🔗 Integrated Message Examples\n\n*No integrated examples available*\n\n---"
        
        content = """## 🔗 Integrated Message Examples
### Before & After Comparisons with Full Context

This section shows the complete transformation journey from problematic messaging to compliant alternatives, demonstrating the practical application of best practices."""
        
        integrated_messages = integration_result.get("integrated_messages", [])
        
        for pair in integrated_messages:
            pair_id = pair.get("pair_id", "Unknown")
            problematic = pair.get("problematic", {})
            correction = pair.get("correction", {})
            
            content += f"""

### 🔄 Message Transformation #{pair_id}

#### ❌ BEFORE: Problematic Version
**Message:** "{problematic.get('message', 'Not available')}"

**Issues:** {', '.join(problematic.get('problems_identified', []))}

#### ✅ AFTER: Compliant Version"""
            
            if correction:
                content += f"""
**Message:** "{correction.get('corrected_message', 'Not available')}"

**Key Improvements:** {', '.join(correction.get('changes_made', []))}

**Compliance Status:** {correction.get('compliance_notes', 'Not specified')}"""
            else:
                content += """
**Status:** ⚠️ Correction pending - requires additional development"""
            
            # Integration quality indicator
            if pair.get("integration_complete"):
                content += "\n\n**✅ Integration Quality:** Complete transformation with full compliance validation"
            else:
                content += "\n\n**⚠️ Integration Quality:** Requires additional refinement"
        
        # Cross-reference quality
        cross_refs = integration_result.get("cross_references", {})
        if cross_refs:
            content += f"""

### 🔗 Cross-Reference Analysis

**Scenario Integration:** {"✅ Messages properly reference business context" if cross_refs.get("scenario_to_messages", {}).get("referenced") else "⚠️ Messages need better scenario alignment"}

**Regulatory Consistency:** {"✅ Consistent regulatory framework application" if cross_refs.get("regulatory_consistency") else "⚠️ Regulatory framework needs alignment"}"""
        
        content += "\n\n---"
        return content

    def _generate_frameworks_section(self, playbook_data: Dict[str, Any], corrected_data: Dict[str, Any]) -> str:
        """Generate comprehensive frameworks and tools section"""
        content = """## 🛠️ Frameworks and Validation Tools
### Practical Implementation Resources"""
        
        # Claim-to-proof framework
        framework = playbook_data.get("claim_to_proof_framework", {})
        if framework:
            content += f"""

### 🔄 {framework.get('framework_name', 'Claim-to-Proof Validation Framework')}

#### 📋 Step-by-Step Process

{self._format_numbered_list(framework.get('steps', []))}

#### ❓ Validation Questions

{self._format_list_items(framework.get('validation_questions', []), "❓")}

#### 📊 Proof Requirements

{self._format_list_items(framework.get('proof_requirements', []), "📋")}

#### ⚠️ Common Pitfalls to Avoid

{self._format_list_items(framework.get('common_pitfalls', []), "⚠️")}

#### 💡 Framework Examples

{self._format_list_items(framework.get('examples', []), "💡")}"""
            
            # Tools needed
            tools_needed = framework.get('tools_needed', [])
            if tools_needed:
                content += f"""

#### 🛠️ Required Tools & Resources

{self._format_list_items(tools_needed, "🔧")}"""
            
            # Timelines
            timelines = framework.get('timelines', [])
            if timelines:
                content += f"""

#### ⏰ Implementation Timelines

{self._format_list_items(timelines, "📅")}"""
        
        # Additional frameworks from corrections
        if corrected_data and corrected_data.get("general_guidelines"):
            content += f"""

### 📋 Message Development Guidelines

{self._format_list_items(corrected_data["general_guidelines"], "✅")}"""
        
        content += "\n\n---"
        return content

    def _generate_compliance_section(self, playbook_data: Dict[str, Any], training_request: Dict[str, Any]) -> str:
        """Generate compliance guidelines section"""
        content = f"""## ✅ Compliance Guidelines
### {training_request.get('regulatory_framework', 'Regulatory')} Framework Requirements"""
        
        # Compliance checklist
        checklist = playbook_data.get("compliance_checklist", {})
        if checklist:
            content += f"""

### 📋 {checklist.get('checklist_name', 'Quick Compliance Checklist')}

#### 🗂️ Review Categories

{self._format_list_items(checklist.get('categories', []), "📁")}

#### ❓ Validation Questions

{self._format_list_items(checklist.get('questions', []), "❓")}

#### 🚨 Red Flags to Watch For

{self._format_list_items(checklist.get('red_flags', []), "🚨")}

#### ✅ Approval Criteria

{self._format_list_items(checklist.get('approval_criteria', []), "✅")}"""
            
            # Escalation procedures
            escalation_procedures = checklist.get('escalation_procedures', [])
            if escalation_procedures:
                content += f"""

#### 🆘 Escalation Procedures

{self._format_list_items(escalation_procedures, "📞")}"""
            
            # Review frequency
            if checklist.get('review_frequency'):
                content += f"""

#### 🔄 Review Schedule

**Frequency:** {checklist['review_frequency']}"""
        
        # Do's and Don'ts
        dos_and_donts = playbook_data.get("dos_and_donts", [])
        if dos_and_donts:
            content += f"""

### ✅ Do's and Don'ts Quick Reference

{self._format_list_items(dos_and_donts, "📌")}"""
        
        # Greenwashing patterns
        greenwashing_patterns = playbook_data.get("greenwashing_patterns", [])
        if greenwashing_patterns:
            content += f"""

### 🚫 Greenwashing Patterns to Avoid

{self._format_list_items(greenwashing_patterns, "🚫")}"""
        
        content += "\n\n---"
        return content

    def _generate_case_studies_section(self, playbook_data: Dict[str, Any], problematic_data: Dict[str, Any]) -> str:
        """Generate comprehensive case studies section"""
        content = """## 📖 Case Study Library
### Real-World Examples and Lessons Learned"""
        
        # Case studies from playbook
        case_studies = playbook_data.get("case_study_snapshots", [])
        
        if case_studies:
            for i, case in enumerate(case_studies, 1):
                message_type = case.get("message_type", "example")
                type_emoji = "✅" if "good" in message_type else "❌" if "bad" in message_type else "📋"
                
                content += f"""

### {type_emoji} Case Study #{i}: {case.get('title', 'Untitled Case')}

**Company:** {case.get('company_name', 'Anonymous')}  
**Example Type:** {message_type.replace('_', ' ').title()}

**Original Message:**
> "{case.get('original_message', 'Message not provided')}"

**📊 Analysis:**
{case.get('analysis', 'Analysis not available')}

**🎯 Key Lesson:**
{case.get('key_lesson', 'Key lesson not specified')}

**⚖️ Regulatory Context:**
{case.get('regulatory_context', 'Regulatory context not provided')}"""
                
                # Outcome
                if case.get('outcome'):
                    content += f"""

**📈 Outcome:**
{case['outcome']}"""
                
                # Lessons learned
                lessons_learned = case.get('lessons_learned', [])
                if lessons_learned:
                    content += f"""

**📚 Detailed Lessons Learned:**
{self._format_list_items(lessons_learned, "💡")}"""
        
        # Additional examples from problematic messages
        if problematic_data and problematic_data.get("problematic_messages"):
            content += """

### 📰 Additional Real-World Examples from Analysis"""
            
            for i, message in enumerate(problematic_data["problematic_messages"], 1):
                real_world_examples = message.get("real_world_examples", [])
                if real_world_examples:
                    content += f"""

**Example Set #{i}:**
{self._format_list_items(real_world_examples, "📰")}"""
        
        content += "\n\n---"
        return content

    def _generate_implementation_section(self, playbook_data: Dict[str, Any], scenario_data: Dict[str, Any]) -> str:
        """Generate implementation roadmap section"""
        company_name = scenario_data.get("company_name", "your organization")
        
        content = f"""## 🚀 Implementation Roadmap
### Getting Started with Compliant Sustainability Messaging at {company_name}"""
        
        # Quick start guide
        quick_start = playbook_data.get("quick_start_guide", [])
        if quick_start:
            content += f"""

### 🏁 Quick Start Guide

{self._format_numbered_list(quick_start)}"""
        
        # Team training tips
        training_tips = playbook_data.get("team_training_tips", [])
        if training_tips:
            content += f"""

### 👥 Team Training & Education

{self._format_list_items(training_tips, "👨‍🏫")}"""
        
        # Success stories
        success_stories = playbook_data.get("success_stories", [])
        if success_stories:
            content += f"""

### 🏆 Success Stories & Implementation Examples

{self._format_list_items(success_stories, "🎉")}"""
        
        # Common mistakes
        common_mistakes = playbook_data.get("common_mistakes", [])
        if common_mistakes:
            content += f"""

### ⚠️ Common Implementation Mistakes to Avoid

{self._format_list_items(common_mistakes, "⚠️")}"""
        
        content += "\n\n---"
        return content

    def _generate_regulatory_section(self, playbook_data: Dict[str, Any], training_request: Dict[str, Any]) -> str:
        """Generate regulatory reference section"""
        framework = training_request.get("regulatory_framework", "Global")
        
        content = f"""## 📄 Regulatory Reference Guide
### {framework} Sustainability Messaging Requirements"""
        
        # Regulatory references
        regulatory_refs = playbook_data.get("regulatory_references", [])
        if regulatory_refs:
            content += f"""

### 📚 Key Regulations & Standards

{self._format_list_items(regulatory_refs, "⚖️")}"""
        
        # Additional resources
        additional_resources = playbook_data.get("additional_resources", [])
        if additional_resources:
            content += f"""

### 🔗 Additional Learning Resources

{self._format_list_items(additional_resources, "📖")}"""
        
        content += "\n\n---"
        return content

    def _generate_quality_metrics_section(self, validation_result: Dict[str, Any], extracted_data: Dict[str, Any]) -> str:
        """Generate quality metrics and session information"""
        content = f"""## 📊 Quality Metrics & Session Data
### Training Session Analysis & Validation Results

#### 🎯 Overall Quality Assessment

**Quality Score:** {validation_result.get('quality_score', 0):.1f}/100  
**Data Completeness:** {validation_result.get('completeness_percentage', 0):.1f}%  
**Tasks Successfully Extracted:** {extracted_data.get('total_tasks_found', 0)}/4  
**Validation Status:** {"✅ Passed" if validation_result.get('is_complete') else "⚠️ Needs Review"}

#### 📋 Task-by-Task Validation"""
        
        task_validations = validation_result.get("task_validations", {})
        for task_name, validation in task_validations.items():
            score = validation.get("score", 0)
            issues = validation.get("issues", [])
            strengths = validation.get("strengths", [])
            
            status_emoji = "✅" if score >= 80 else "🟡" if score >= 60 else "🔴"
            
            content += f"""

**{task_name.title()} Task {status_emoji}**
- Score: {score}/100
- Issues: {len(issues)} identified
- Strengths: {len(strengths)} found"""
            
            if issues:
                content += f"\n- Key Issues: {', '.join(issues[:3])}"
            if strengths:
                content += f"\n- Key Strengths: {', '.join(strengths[:3])}"
        
        # Data richness
        data_richness = validation_result.get("data_richness", {})
        if data_richness:
            content += f"""

#### 📊 Data Richness Metrics

**Total Characters Extracted:** {data_richness.get('total_characters', 0):,}  
**Total Data Fields:** {data_richness.get('total_fields', 0):,}  
**Complex Structures:** {data_richness.get('nested_structures', 0)}  
**List Items:** {data_richness.get('list_items', 0):,}"""
        
        # Extraction log
        extraction_log = extracted_data.get("extraction_log", [])
        if extraction_log:
            content += f"""

#### 📝 Extraction Process Log

{self._format_list_items(extraction_log[-10:], "📋")}"""  # Show last 10 entries
        
        content += f"""

#### 🔧 Session Technical Details

**Session ID:** {self.session_id}  
**Generation Timestamp:** {self.generation_timestamp.isoformat()}  
**Processing Status:** {"✅ Successful" if validation_result.get('is_complete') else "⚠️ Partial"}  
**Data Source:** Session-specific AI agent outputs with real-time validation

---"""
        
        return content

    def _generate_appendices_section(self, playbook_data: Dict[str, Any], extracted_data: Dict[str, Any]) -> str:
        """Generate appendices section"""
        content = """## 📚 Appendices
### Reference Materials & Additional Information"""
        
        # Glossary
        glossary_terms = playbook_data.get("glossary_terms", [])
        if glossary_terms:
            content += f"""

### 📖 Glossary of Terms

{self._format_list_items(glossary_terms, "📝")}"""
        
        # Contact resources
        contact_resources = playbook_data.get("contact_resources", [])
        if contact_resources:
            content += f"""

### 📞 Contact Resources & Support

{self._format_list_items(contact_resources, "📧")}"""
        
        # Data extraction summary
        content += f"""

### 🔍 Data Extraction Summary

**Session Processing Details:**
- Total Tasks Processed: {extracted_data.get('total_tasks_found', 0)}
- Extraction Success Rate: {('100%' if extracted_data.get('parsing_success') else 'Partial')}
- Data Validation: {"✅ Passed" if extracted_data.get('parsing_success') else "⚠️ Review Required"}

**Content Statistics:**
- Scenario Data: {"✅ Extracted" if extracted_data.get('scenario_data') else "❌ Missing"}
- Problematic Messages: {"✅ Extracted" if extracted_data.get('problematic_messages') else "❌ Missing"}
- Corrected Messages: {"✅ Extracted" if extracted_data.get('corrected_messages') else "❌ Missing"}
- Playbook Framework: {"✅ Extracted" if extracted_data.get('playbook_data') else "❌ Missing"}

### 📄 Document Metadata

**Generated by:** Sustainability Training AI v2.0  
**Generation Method:** Enhanced data extraction with validation  
**Content Verification:** Multi-layer validation with quality scoring  
**Compliance Framework:** Current regulatory requirements as of {datetime.now().year}  

---

*This playbook was generated using advanced AI agents with real-time data extraction, validation, and integration. All content is based on current best practices and regulatory requirements.*

**🌱 Thank you for using our enhanced sustainability training system!**"""
        
        return content

    # Helper methods
    def _format_list_items(self, items: List[str], bullet: str = "•") -> str:
        """Format list items with custom bullets"""
        if not items:
            return "*No items available*"
        
        formatted_items = []
        for item in items:
            if isinstance(item, str) and item.strip():
                formatted_items.append(f"{bullet} {item}")
            elif not isinstance(item, str):
                formatted_items.append(f"{bullet} {str(item)}")
        
        return "\n".join(formatted_items) if formatted_items else "*No valid items available*"

    def _format_numbered_list(self, items: List[str]) -> str:
        """Format items as numbered list"""
        if not items:
            return "*No items available*"
        
        formatted_items = []
        for i, item in enumerate(items, 1):
            if isinstance(item, str) and item.strip():
                formatted_items.append(f"{i}. {item}")
        
        return "\n".join(formatted_items) if formatted_items else "*No valid items available*"

def generate_comprehensive_playbook(extracted_data: Dict[str, Any], 
                                  validation_result: Dict[str, Any],
                                  integration_result: Dict[str, Any],
                                  training_request: Dict[str, Any],
                                  session_id: str) -> str:
    """Main function to generate comprehensive markdown playbook"""
    formatter = MarkdownFormatter(session_id)
    return formatter.generate_comprehensive_markdown(
        extracted_data, 
        validation_result, 
        integration_result, 
        training_request
    )

def generate_summary_report(validation_result: Dict[str, Any], session_id: str) -> str:
    """Generate a quick summary report"""
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    quality_score = validation_result.get('quality_score', 0)
    completeness = validation_result.get('completeness_percentage', 0)
    
    return f"""# Sustainability Training - Quick Summary Report

**Session ID:** {session_id}  
**Generated:** {timestamp}  
**Quality Score:** {quality_score:.1f}/100  
**Completeness:** {completeness:.1f}%  

## Status Overview
- **Overall Status:** {"✅ Success" if validation_result.get('is_complete') else "⚠️ Partial"}
- **Tasks Extracted:** {len(validation_result.get('task_validations', {}))}
- **Issues Found:** {len(validation_result.get('overall_issues', []))}

## Next Steps
1. Review the comprehensive playbook
2. Implement recommended corrections
3. Validate messaging using provided frameworks
4. Train team on best practices

*Full detailed playbook available in the complete document.*
"""